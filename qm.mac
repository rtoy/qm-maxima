/*
;;  Author Eric Majzoub, Department of Physics and Astronomy
;;  University of Missouri, St. Louis
;;  Copyright (C) 2024 Eric Majzoub

;;  This program is free software; you can redistribute it and/or modify 
;;  it under the terms of the GNU General Public License as published by         
;;  the Free Software Foundation; either version 2 of the License, or            
;;  (at your option) any later version.                                  
                                                                                 
;;  This program is distributed in the hope that it will be useful,              
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of               
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                
;;  GNU General Public License for more details.         

;; Quantum mechanics package for Maxima.
*/

qm_version: "0.8"$

/* load("groups_ehm.mac") $ */
load("qm.lisp") $
/* load the documentation */
load("qm-index.lisp")$
load("qm-index-html.lisp")$

complexp(z):=block(if imagpart(z)#0 then return(true) else return(false));

/******************************/
/* Simplification definitions */
/******************************/
matchdeclare([x,y],freeof(%i));
tellsimpafter(%i*x+%i*y,%i*(x+y));

matchdeclare([x,y],freeof(%i));
matchdeclare([cc],numberp);
tellsimpafter(%e^x*(%e^y+cc),%e^(x+y)+cc*%e^x);
tellsimpafter(%e^x*(cc-%e^y),cc*%e^x-%e^(x+y));

matchdeclare(x,freeof(%i));
tellsimpafter(%e^x+%e^(-x),2*cosh(x));
tellsimpafter(%e^x-%e^(-x),2*sinh(x));
tellsimpafter(sinh(x)/cosh(x),tanh(x));
tellsimpafter(cos(x)+%i*sin(x),%e^(%i*x));
tellsimpafter(cos(x)-%i*sin(x),%e^(-%i*x));

/*******************************/
/* Constants and assumptions   */
/*******************************/
declare(hbar,real) $
assume(hbar>0) $

/************************/
/* make simple vectors  */
/************************/
/* Real column and row vectors, Note: kets and bras are below */
cvec([u]) := transpose(matrix(u)) $
rvec([u]) := matrix(u) $

/***************************************************/
/* implement bra, ket operators via simplification */
/***************************************************/
/* bras and kets entered as lists will be given matrix representations */
/* bra and ket of a list represented as row and column matrices, respectively */
matchdeclare(ll, listp);
tellsimpafter(bra(ll), matrix(ll));
tellsimpafter(ket(ll), transpose(matrix (ll)));

/***************************************/
/* Rules, simp for general kets/bras   */
/***************************************/

/* dagger */
matchdeclare([a,b],all);
tellsimpafter( dagger( bra(a) ), ket(a) );
tellsimpafter( dagger( ket(a) ), bra(a) );

/* this is meant to be used for general bras and kets, but
   it breaks computations using the matrix reps...
matchdeclare(cx,complexp); 
tellsimpafter( dagger(cx*ket(a)), 'conjugate(cx)*bra(a) );
tellsimpafter( dagger(cx*bra(a)), 'conjugate(cx)*ket(a) );
tellsimpafter( dagger(cx), 'conjugate(cx) );
*/

/* tellsimpafter( dagger(aa*ket(a)), dagger(aa)*bra(a) ); */


/* special case of dagger for matrix argument */
matchdeclare (mx, matrixp);
tellsimpafter (dagger (mx), conjugate (transpose (mx)));

/* braket */
matchdeclare([kk,ll], ketp, bb, brap );
tellsimpafter( braket(bb,kk) , bb . kk );
tellsimpafter( braket(ll,kk) , dagger(ll) . kk);
tellsimpafter( braket(kk,bb) , false );
tellsimpafter( braket(bb,bb) , false );

/* <a|b> --> delta(a,b), assumes an orthonormal set */
tellsimpafter( braket(bra(a),ket(b)), kron_delta(a,b));
tellsimpafter( bra(a) . ket(b), kron_delta(a,b));
tellsimpafter( braket(bra(a)+c,ket(b)), braket(bra(a),ket(b))+braket(c,ket(b))); /* distribution */

/* norm */
matchdeclare( kk, ketp, bb, brap );
tellsimpafter(norm (kk), sqrt( braket(kk,kk) ));
tellsimpafter(norm (bb), sqrt( braket(bb,dagger(bb)) ));

/* magsqr */
magsqr(c) := c*conjugate(c);

/* commutator */
commutator(X,Y) := X.Y - Y.X;
expect(Op,psi) := dagger(psi) . Op . psi $
qm_variance(Op,psi) := sqrt(expect(Op . Op,psi) - expect(Op,psi)^2) $

/* Born rule */
probability(psi,n) := magsqr(psi[n]);

/***************************************/
/* Define predicates for kets and bras */
/***************************************/
ketp(psi) := block([r,c],
     if matrixp(psi) then (
        [r,c] : matrix_size(psi),
        (c = 1) and (r > 1) and every(lambda([q], not (matrixp(q) or listp(q) or setp(q))), psi))
    else false);
brap(psi) := block([r,c],
     if matrixp(psi) then (
        [r,c] : matrix_size(psi),
        (r = 1) and (c > 1) and every(lambda([q], not (matrixp(q) or listp(q) or setp(q))), psi))
    else false);



/******************************************************/
/******************************************************/
/*              (j,m) kets and bras                   */
/******************************************************/
/******************************************************/
rationalp(a):= if integerp(num(a)) and integerp(denom(a)) then true else false;
sym_ratp(a):=block(if symbolp(a) or rationalp(a) then
		      return(true) else return(false) );
matchdeclare([j,m], sym_ratp );
tellsimpafter( jm_ket([j,m]) , [jmket, matrix([j,m])] );
tellsimpafter( jm_bra([j,m]) , [jmbra, matrix([j,m])] );

jm_ketp(k) := if k[1]#jmket then false else true$
jm_brap(k) := if k[1]#jmbra then false else true$

matchdeclare(jb, jm_brap, jk, jm_ketp); /* covers the matrix rep */
tellsimpafter( jm_braket(jb,jk), simp_jm_braket(jb,jk) );
simp_jm_braket(b,k) := block([j1,j2,m1,m2],
	     if b[1]#jmbra or k[1]#jmket then return(false),
	     j1:b[2][1][1], m1:b[2][1][2], j2:k[2][1][1], m2:k[2][1][2],
	     if j1=j2 and m1=m2 then return(1) else return(0) )$
/* Check that m is within -j to +j */
jm_check(j,m) := block([pos:0],
	      if rationalp(j)=false or rationalp(m)=false then return(false) else
	      	 for jn: j step -1 thru -j do
		     if jn=m then pos:1,
		 if pos=1 then true else false )$
JP(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      j:k[2][1][1], m:k[2][1][2], sqrterm:sqrt(j*(j+1)-m*(m+1))*hbar,
      return( sqrterm * 'jm_ket(j,m+1) ) )$
JM(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      j:k[2][1][1], m:k[2][1][2], sqrterm:sqrt(j*(j+1)-m*(m-1))*hbar,
      return( sqrterm * 'jm_ket(j,m-1) ) )$
Jsqr(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      j:k[2][1][1], return( (j*(j+1)) * hbar^2 * 'jm_ket(j,m) ) )$
Jz(k) := block([j,m,sqrterm],
      if k[1]#jmket then return(false),
      m:k[2][1][2], return( m * hbar * 'jm_ket(j,m) ) )$

/********************************************/
/* Rules, simp for general jm_kets/jm_bras  */
/********************************************/
matchdeclare([jj1,jj2,mm1,mm2],sym_ratp, c, all);
tellsimpafter(jm_braket(jm_bra(jj1,mm1),jm_ket(jj2,mm2)),
	kron_delta(jj1,jj2)*kron_delta(mm1,mm2)); /* <j1m1,j2m2> --> delta(j1j2)*delta(m1m2) */
tellsimpafter(jm_braket(jm_bra(jj1,mm1)+c, jm_ket(jj2,mm2)),
	jm_braket(jm_bra(jj1,mm1),jm_ket(jj2,mm2))+jm_braket(c,jm_ket(jj2,mm2))); /* distribution */

/******************************************************/
/******************************************************/
/* Angular momentum ladder operators for general spin */
/******************************************************/
/******************************************************/
SP(s) := genmatrix(lambda([i,j], block([m:-s+j-2],
         hbar*kron_delta(i,j-1)*sqrt( s*(s+1)-m*(m+1)) )), 2*s+1,2*s+1);
SM(s) := dagger(SP(s))$
SX(s) := (1/2)*(SP(s)+SM(s))$
SY(s) := (%i/2)*(SM(s)-SP(s))$
SZ(s) := 1/(%i*hbar)*commutator(SX(s),SY(s))$


/******************/
/* Spin-1/2 stuff */
/******************/

/* spin-1/2 state vectors */
zp : cvec(1,0) $
zm : cvec(0,1) $
xp : (1/sqrt(2))*(zp+zm) $
xm : (1/sqrt(2))*(zp-zm) $
yp : (1/sqrt(2))*(zp+%i*zm) $
ym : (1/sqrt(2))*(zp-%i*zm) $

/* Pauli sigma matrices */
sigmax : matrix([0,1],[1,0]) $
sigmay : matrix([0,-%i],[%i,0]) $
sigmaz : matrix([1,0],[0,-1]) $

/* spin-1/2 matrices */
Sz : SZ(1/2) $
Sx : SX(1/2) $
Sy : SY(1/2) $

/******************/
/* Spin-1 stuff */
/******************/

/* basis states for a spin-1 particle */
zu : cvec(1,0,0) $
zz : cvec(0,1,0) $
zd : cvec(0,0,1) $

/* spin-1 matrices
Sz1 : hbar*matrix([1,0,0],[0,0,0],[0,0,-1]) $
Sx1 : (hbar/sqrt(2))*matrix([0,1,0],[1,0,1],[0,1,0]) $
Sy1 : (hbar/sqrt(2))*matrix([0,-%i,0],[%i,0,-%i],[0,%i,0]) $ */
Sz1 : SZ(1) $
Sx1 : SX(1) $
Sy1 : SY(1) $


/****************************************/
/*         Rotation Operators           */
/****************************************/
Rot(Op,phi) := block([M1,M2,M3],
	  M1: matrixexp(-%i*Op*phi/hbar),
	  M2: matrixmap(distrib,M1),
	  M3: matrixmap(combine,M2),
	  trigreduce(M3)
	  )$

/* the following is so RZ appears with exponentials
   and RX and RY with trig functions */
RZ(s,t) := Rot(SZ(s),t)$
RX(s,t) := block([demoivre:true], Rot(SX(s),t))$
RY(s,t) := block([demoivre:true], Rot(SY(s),t))$

/* time-evolution operator */
UU(H,t) := block([M,demoivre:true], Rot(H,t))$

/*****************************************************************/
/*****************************************************************/
/*****************************************************************/
/*                tensor products                                */
/*****************************************************************/
/*****************************************************************/
/*****************************************************************/
matchdeclare(ll,listp);
tellsimpafter(ketprod(ll), simpketprod(ll));
simpketprod(u) := block([N,fail:0],
	     N: length(u),
	     for i: 1 thru N do
	     	 if ketp(''u[i])=false then fail:1,
	     if fail=0 then [tpket,u]
	     else disp("all elements must be kets") )$

tellsimpafter(braprod(ll), simpbraprod(ll));
simpbraprod(u) := block([N,fail:0],
	     N: length(u),
	     for i: 1 thru N do
	     	 if brap(''u[i])=false then fail:1,
	     if fail=0 then [tpbra,u]
	     else disp("all elements must be bras") )$
matchdeclare([L1,L2], listp);
tellsimpafter(braketprod(L1,L2), simpbraketprod(L1,L2));
braketprod(B,K) := block([N,M,fail:0,prod:1],
		if is(B[1]#tpbra) then return(false),
		if is(K[1]#tpket) then return(false),
		N: length(B[2]),
		M: length(K[2]),
		if M#N then return(false)
		else for i: 1 thru N do
		     prod: prod*braket(B[2][i],K[2][i]),
		prod )$

/*******************************************/
/* Rules and simp for general tensor prods */
/*******************************************/
/* This is much harder */
